/**
 * @license Data plugin for Highcharts
 *
 * (c) 2012-2013 Torstein Hønsi
 * Last revision 2013-06-07
 *
 * License: www.highcharts.com/license
 */

/*
 * The Highcharts Data plugin is a utility to ease parsing of input sources like
 * CSV, HTML tables or grid views into basic configuration options for use 
 * directly in the Highcharts constructor.
 *
 * Demo: http://jsfiddle.net/highcharts/SnLFj/
 *
 * --- OPTIONS ---
 *
 * - columns : Array<Array<Mixed>>
 * A two-dimensional array representing the input data on tabular form. This input can
 * be used when the data is already parsed, for example from a grid view component.
 * Each cell can be a string or number. If not switchRowsAndColumns is set, the columns
 * are interpreted as series. See also the rows option.
 *
 * - complete : Function(chartOptions)
 * The callback that is evaluated when the data is finished loading, optionally from an 
 * external source, and parsed. The first argument passed is a finished chart options
 * object, containing series and an xAxis with categories if applicable. Thise options
 * can be extended with additional options and passed directly to the chart constructor.
 *
 * - csv : String
 * A comma delimited string to be parsed. Related options are startRow, endRow, startColumn
 * and endColumn to delimit what part of the table is used. The lineDelimiter and 
 * itemDelimiter options define the CSV delimiter formats.
 * 
 * - endColumn : Integer
 * In tabular input data, the first row (indexed by 0) to use. Defaults to the last 
 * column containing data.
 *
 * - endRow : Integer
 * In tabular input data, the last row (indexed by 0) to use. Defaults to the last row
 * containing data.
 *
 * - googleSpreadsheetKey : String 
 * A Google Spreadsheet key. See https://developers.google.com/gdata/samples/spreadsheet_sample
 * for general information on GS.
 *
 * - googleSpreadsheetWorksheet : String 
 * The Google Spreadsheet worksheet. The available id's can be read from 
 * https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic
 *
 * - itemDelimiter : String
 * Item or cell delimiter for parsing CSV. Defaults to ",".
 *
 * - lineDelimiter : String
 * Line delimiter for parsing CSV. Defaults to "\n".
 *
 * - parsed : Function
 * A callback function to access the parsed columns, the two-dimentional input data
 * array directly, before they are interpreted into series data and categories.
 *
 * - parseDate : Function
 * A callback function to parse string representations of dates into JavaScript timestamps.
 * Return an integer on success.
 *
 * - rows : Array<Array<Mixed>>
 * The same as the columns input option, but defining rows intead of columns.
 *
 * - startColumn : Integer
 * In tabular input data, the first column (indexed by 0) to use. 
 *
 * - startRow : Integer
 * In tabular input data, the first row (indexed by 0) to use.
 *
 * - table : String|HTMLElement
 * A HTML table or the id of such to be parsed as input data. Related options ara startRow,
 * endRow, startColumn and endColumn to delimit what part of the table is used.
 *//*
 Data plugin for Highcharts

 (c) 2012-2013 Torstein Hønsi
 Last revision 2013-06-07

 License: www.highcharts.com/license
*/
(function(h){var m=h.each,p=function(b,a){this.init(b,a)};h.extend(p.prototype,{init:function(b,a){this.options=b;this.chartOptions=a;this.columns=b.columns||this.rowsToColumns(b.rows)||[];this.columns.length?this.dataFound():(this.parseCSV(),this.parseTable(),this.parseGoogleSpreadsheet())},getColumnDistribution:function(){var b=this.chartOptions,a=b&&b.chart&&b.chart.type,c=[];m(b&&b.series||[],function(b){c.push((h.seriesTypes[b.type||a||"line"].prototype.pointArrayMap||[0]).length)});this.valueCount={global:(h.seriesTypes[a||"line"].prototype.pointArrayMap||[0]).length,individual:c}},dataFound:function(){this.parseTypes();this.findHeaderRow();this.parsed();this.complete()},parseCSV:function(){var b=this,a=this.options,c=a.csv,d=this.columns,f=a.startRow||0,k=a.endRow||Number.MAX_VALUE,l=a.startColumn||0,e=a.endColumn||Number.MAX_VALUE,g=0;c&&(c=c.replace(/\r\n/g,"\n").replace(/\r/g,"\n").split(a.lineDelimiter||"\n"),m(c,function(c,h){var q=b.trim(c),t=0===q.indexOf("#");h>=f&&h<=k&&!t&&""!==q&&(q=c.split(a.itemDelimiter||","),m(q,function(b,a){a>=l&&a<=e&&(d[a-l]||(d[a-l]=[]),d[a-l][g]=b)}),g+=1)}),this.dataFound())},parseTable:function(){var b=this.options,a=b.table,c=this.columns,d=b.startRow||0,f=b.endRow||Number.MAX_VALUE,k=b.startColumn||0,l=b.endColumn||Number.MAX_VALUE,e;a&&("string"===typeof a&&(a=document.getElementById(a)),m(a.getElementsByTagName("tr"),function(b,a){e=0;a>=d&&a<=f&&m(b.childNodes,function(b){("TD"===b.tagName||"TH"===b.tagName)&&e>=k&&e<=l&&(c[e]||(c[e]=[]),c[e][a-d]=b.innerHTML,e+=1)})}),this.dataFound())},parseGoogleSpreadsheet:function(){var b=this,a=this.options,c=a.googleSpreadsheetKey,d=this.columns,f=a.startRow||0,k=a.endRow||Number.MAX_VALUE,l=a.startColumn||0,e=a.endColumn||Number.MAX_VALUE,g,h;c&&jQuery.getJSON("https://spreadsheets.google.com/feeds/cells/"+c+"/"+(a.googleSpreadsheetWorksheet||"od6")+"/public/values?alt\x3djson-in-script\x26callback\x3d?",function(a){a=a.feed.entry;var c,m=a.length,p=0,r=0,n;for(n=0;n<m;n++)c=a[n],p=Math.max(p,c.gs$cell.col),r=Math.max(r,c.gs$cell.row);for(n=0;n<p;n++)n>=l&&n<=e&&(d[n-l]=[],d[n-l].length=Math.min(r,k-f));for(n=0;n<m;n++)c=a[n],g=c.gs$cell.row-1,h=c.gs$cell.col-1,h>=l&&h<=e&&g>=f&&g<=k&&(d[h-l][g-f]=c.content.$t);b.dataFound()})},findHeaderRow:function(){m(this.columns,function(b){});this.headerRow=0},trim:function(b){return"string"===typeof b?b.replace(/^\s+|\s+$/g,""):b},parseTypes:function(){for(var b=this.columns,a=b.length,c,d,f,k;a--;)for(c=b[a].length;c--;)d=b[a][c],f=parseFloat(d),k=this.trim(d),k==f?(b[a][c]=f,31536E6<f?b[a].isDatetime=!0:b[a].isNumeric=!0):(d=this.parseDate(d),0!==a||"number"!==typeof d||isNaN(d)?b[a][c]=""===k?null:k:(b[a][c]=d,b[a].isDatetime=!0))},dateFormats:{"YYYY-mm-dd":{regex:"^([0-9]{4})-([0-9]{2})-([0-9]{2})$",parser:function(b){return Date.UTC(+b[1],b[2]-1,+b[3])}}},parseDate:function(b){var a=this.options.parseDate,c,d,f;a&&(c=a(b));if("string"===typeof b)for(d in this.dateFormats)a=this.dateFormats[d],(f=b.match(a.regex))&&(c=a.parser(f));return c},rowsToColumns:function(b){var a,c,d,f,k;if(b)for(k=[],c=b.length,a=0;a<c;a++)for(f=b[a].length,d=0;d<f;d++)k[d]||(k[d]=[]),k[d][a]=b[a][d];return k},parsed:function(){this.options.parsed&&this.options.parsed.call(this,this.columns)},complete:function(){var b=this.columns,a,c,d=this.options,f,k,l,e,g,m;if(d.complete){this.getColumnDistribution();1<b.length&&(a=b.shift(),0===this.headerRow&&a.shift(),a.isDatetime?c="datetime":a.isNumeric||(c="category"));for(e=0;e<b.length;e++)0===this.headerRow&&(b[e].name=b[e].shift());k=[];for(m=e=0;e<b.length;m++){f=h.pick(this.valueCount.individual[m],this.valueCount.global);l=[];for(g=0;g<b[e].length;g++)l[g]=[a[g],void 0!==b[e][g]?b[e][g]:null],1<f&&l[g].push(void 0!==b[e+1][g]?b[e+1][g]:null),2<f&&l[g].push(void 0!==b[e+2][g]?b[e+2][g]:null),3<f&&l[g].push(void 0!==b[e+3][g]?b[e+3][g]:null),4<f&&l[g].push(void 0!==b[e+4][g]?b[e+4][g]:null);k[m]={name:b[e].name,data:l};e+=f}d.complete({xAxis:{type:c},series:k})}}});h.Data=p;h.data=function(b,a){return new p(b,a)};h.wrap(h.Chart.prototype,"init",function(b,a,c){var d=this;a&&a.data?h.data(h.extend(a.data,{complete:function(f){a.series&&m(a.series,function(b,c){a.series[c]=h.merge(b,f.series[c])});a=h.merge(f,a);b.call(d,a,c)}}),a):b.call(d,a,c)})})(Highcharts);